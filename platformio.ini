; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:genericSTM32F411CE]
platform = ststm32
board = genericSTM32F411CE
framework = arduino
upload_protocol = dfu
monitor_speed = 115200
build_unflags =
	-std=gnu++17
build_flags =
	-std=gnu++20
	-D LSE_VALUE=32768UL
    -D HSE_VALUE=32000000UL
    -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC 

[env:blackpill_f411ce]
platform = ststm32
board = blackpill_f411ce
framework = arduino
upload_protocol = dfu
monitor_speed = 115200
build_flags = 
    -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC 

[env:uno]
platform = atmelavr
board = uno
framework = arduino
monitor_speed = 115200


; ========================= Basic CPP =========================;
[env:BasicArduino]
extends = env:uno

build_src_filter = +<Basic_CPP/1.BasicArduino.cpp> 

[env:declarValue]
extends = env:uno

build_src_filter = +<Basic_CPP/2.declarValue.cpp> 

[env:array]
extends = env:uno

build_src_filter = +<Basic_CPP/3.array.cpp> 

[env:ifElse]
extends = env:uno

build_src_filter = +<Basic_CPP/4.ifElse.cpp> 

[env:loop]
extends = env:uno

build_src_filter = +<Basic_CPP/5.loop.cpp> 

[env:function]
extends = env:uno

build_src_filter = +<Basic_CPP/6.function.cpp> 

[env:struct]
extends = env:uno

build_src_filter = +<Basic_CPP/7.struct.cpp> 

[env:interuptDelay]
extends = env:uno

build_src_filter = +<Basic_CPP/8.interuptDelay.cpp>

; ======================== scanner ======================== ;
[env:scanner]
extends = env:genericSTM32F411CE

build_src_filter = +<../test/scanner.cpp> +<clock.c>

; ======================== bme280 ======================== ;
[env:bme280]
extends = env:genericSTM32F411CE

build_src_filter = +<./sensorAndSdCard/bme280.cpp> +<clock.c>
lib_deps =
	adafruit/Adafruit BME280 Library

; ======================== GNSS ======================== ;
[env:GNSS]
extends = env:genericSTM32F411CE

build_src_filter = +<./sensorAndSdCard/GNSS.cpp> +<clock.c>
lib_deps =
	mikalhart/TinyGPSPlus

; ======================== IMU ======================== ;
[env:IMU]
extends = env:genericSTM32F411CE

build_src_filter = +<./sensorAndSdCard/IMU.cpp> +<clock.c>
lib_deps =
 	qwety/SparkFun LIS331 Accelerometers @ ^1.0.1
    Adafruit LIS331

; ======================== Sd card ======================== ;
[env:Sd_card]
extends = env:genericSTM32F411CE

build_src_filter = +<./sensorAndSdCard/Sd_card.cpp> +<clock.c>
lib_deps =
	greiman/SdFat

; ======================== Lora ======================== ;
; ========= Receive =======;
[env:LoRa_Receive]
extends = env:blackpill_f411ce

build_src_filter = +<./LoRa_and_ground_station/LoRa_Receive.cpp> +<clock.c>
lib_deps = 
	jgromes/RadioLib

; ========= Transmit =======;
[env:LoRa_Transmit]
extends = env:genericSTM32F411CE

build_src_filter = +<./LoRa_and_ground_station/LoRa_Transmit.cpp> +<clock.c>
lib_deps = 
	jgromes/RadioLib

; ========================= ORBIT =========================
[env:ORBIT]
extends = env:genericSTM32F411CE

build_src_filter = +<./ORBIT.cpp> +<clock.c>
	-std=gnu++20

lib_deps =
	adafruit/Adafruit BME280 Library
	greiman/SdFat
    jgromes/RadioLib
	mikalhart/TinyGPSPlus
